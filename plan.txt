Please be a senior web3 developer, and discuss high level idea with me without diving into code and implementation for now.
I am working on a hackathon project for Defi app on XRPL that supports user deposit/withdraw USD.
For the demo code I am not going to use real USDC token for sure, I just need some USDC on the test chain for demo. Are there exisitng solution for getting USDC on testNet I could reply on? If not how can I mint it myself?
Please give a high level, but detailed step by step guide for me. Thanks

1. **Set Up XRPL Testnet Environment**
   - **Install XRPL Tools:** Ensure you have the necessary tools like `xrpl.js` or `xrpl-py` depending on your preferred programming language.
   - **Connect to Testnet:** Configure your development environment to connect to the XRPL Testnet instead of the Mainnet.

2. **Obtain Test XRP**
   - **Use a Faucet:** Access the XRPL Testnet faucet to request test XRP, which is required to create and manage accounts on the test network.
   - **Create Test Accounts:** Generate one or more test accounts that will hold and transact with your dummy USDC tokens.

3. **Define the Dummy USDC Token**
   - **Token Specifications:** Decide on the token's properties such as name (e.g., TestUSDC), symbol (USDC), total supply, and decimal places.
   - **Issuer Account:** Designate one of your test accounts as the issuer of the dummy USDC tokens.

4. **Create the Token on XRPL Testnet**
   - **Trust Lines:** Establish trust lines from user accounts to the issuer account to allow holding of the dummy USDC tokens.
   - **Issue Tokens:** Use XRPL transactions to issue the specified amount of USDC from the issuer account to the designated user accounts.

5. **Minting the Dummy USDC**
   - **Initial Mint:** Execute a transaction from the issuer account to allocate the initial supply of USDC to user accounts.
   - **Minting Capabilities:** If you plan to allow dynamic minting during the hackathon, implement functionality to issue additional tokens as needed.

6. **Integrate with Your DeFi App**
   - **Smart Contracts:** Develop and deploy any necessary smart contracts that handle deposit and withdrawal logic using the dummy USDC tokens.
   - **User Interface:** Update your app's UI to interact with the dummy USDC, facilitating deposit and withdrawal actions for users.

7. **Testing and Validation**
   - **Simulate Transactions:** Perform deposit and withdrawal operations within your app to ensure that the dummy USDC behaves as expected.
   - **Security Checks:** Verify that all transactions are secure and that the token handling adheres to best practices on the XRPL Testnet.

8. **Prepare for Demo**
   - **Documentation:** Document the steps taken to create and mint the dummy USDC for clarity during your hackathon presentation.
   - **Backup Accounts:** Ensure you have backups of your test accounts and token configurations to quickly reset or replicate the demo environment if needed.